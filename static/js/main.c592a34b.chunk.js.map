{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","props","type","placeholder","className","onChange","onInput","Card","useState","hovered","setHover","style","background","backgroundImage","id","backgroundPosition","backgroundRepeat","backgroundSize","hoveredStyle","setStyle","useEffect","backgroundClip","onMouseOver","onMouseLeave","src","alt","name","username","address","email","company","CardList","cards","robots","map","item","index","city","Scroll","children","ErrorBoundary","state","hasError","this","error","React","Component","App","onSearchInputChange","event","setState","searchInput","target","value","fetch","then","response","json","users","foundRobots","filter","robot","toLowerCase","startsWith","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c592a34b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = (props) => {\r\n  return (\r\n    <>\r\n      <input type = \"search\" \r\n      placeholder = \"search robots!\" \r\n      className = 'searchBar searchBar-bot' \r\n      onChange = {props.onInput}/>      \r\n    </>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React, { useEffect, useState } from 'react';\r\n\r\nconst Card = (props) => {\r\n  const [ hovered, setHover ] = useState(false);\r\n  \r\n  let style = {\r\n    background: 'scroll',\r\n    backgroundImage: `url(https://robohash.org/${props.id}?size=300x300)`,\r\n    backgroundPosition: 'center',\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundSize: 'cover',       \r\n  };\r\n\r\n  let [ hoveredStyle, setStyle ] = useState(style);\r\n\r\n  useEffect(() => {\r\n    //let width = window.getComputedStyle(document.querySelector('article')).width.slice(0, 3);\r\n    //let height = window.getComputedStyle(document.querySelector('article')).height.slice(0, 3);\r\n    setStyle({\r\n      background: 'scroll',\r\n      backgroundImage: `linear-gradient( 115deg, rgba(58, 58, 158, 0.8), rgba(136, 136, 206, 0.8) ), \r\n      url(https://robohash.org/${props.id}?size=300x300)`,\r\n      backgroundPosition: 'center center',\r\n      backgroundRepeat: 'no-repeat',\r\n      backgroundSize: 'contain',\r\n      backgroundClip: 'padding-box',\r\n      // display: 'flex',\r\n      // flexFlow: 'column wrap',\r\n      // justifyContent: 'center',\r\n      // alignItems: 'center',    \r\n    });\r\n  }, [props.id])\r\n\r\n  return (\r\n    <article className = {`pa2 ma2 br2 bg-light-green grow ba b--black-30 bw1 shadow-5 tc item`}\r\n     onMouseOver = {() => setHover(true)} \r\n     onMouseLeave = {() => setHover(false)} \r\n     style = {hovered ? hoveredStyle : {}}    \r\n     >\r\n      <img src={`https://robohash.org/${props.id}?size=300x300`} alt=\"avatar\" className = {`tc ${hovered ? 'hidden' : ''}`}/>\r\n      <div>\r\n        <h2>{props.name}</h2>\r\n        <p className = {`${hovered ? '' : 'hidden'}`}>Username: <span className = {`${hovered ? 'bold' : ''}`}>{props.username}</span></p>\r\n        <p className = {`${hovered ? '' : 'hidden'}`}>From: <span className = {`${hovered ? 'bold' : ''}`}>{props.address}</span></p>\r\n        <p><span className = {`${hovered ? '' : 'hidden'}`}>email: </span><span className = {`${hovered ? 'bold' : ''}`}>{props.email}</span></p>\r\n        <p className = {`${hovered ? '' : 'hidden'}`}>Works at: <span className = {`${hovered ? 'bold' : ''}`}>{props.company}</span></p>\r\n      </div>\r\n    </article>\r\n  );\r\n}\r\n\r\n// class Card extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n\r\n//     this.state = {\r\n//       mousedOver: false,\r\n//     }\r\n//   }\r\n\r\n//   render() {        \r\n//     return (\r\n//       <article className = \"dib pa2 ma2 br2 bg-light-green grow ba b--black-30 bw1 shadow-5 tc\">\r\n//         <img src={`https://robohash.org/${this.props.id}?size=300x300`} alt=\"avatar\" className = 'tc'/>\r\n//         <div>\r\n//           <h2>{this.props.name}</h2>\r\n//           <p>{this.props.email}</p>\r\n//         </div>\r\n//       </article>\r\n//     );\r\n//   }\r\n// }\r\n\r\nexport default Card;","import React, {Fragment} from 'react';\r\nimport Card from './Card';\r\n\r\n// const CardList = ( {robots} ) => {\r\n//   const cards = robots.map( (item, index) => {\r\n//     return <Card\r\n//     key = {item.id}\r\n//     id = {item.id} \r\n//     name = {item.name} \r\n//     email = {item.email}/>;      \r\n//   });\r\n//   return (    \r\n//     <Fragment>\r\n//       {cards}\r\n//     </Fragment>\r\n//   );\r\n// }\r\n\r\nconst CardList = ( {robots} ) => {\r\n  const cards = robots.map( (item, index) => {\r\n    return <Card\r\n    key = {item.id}\r\n    id = {item.id} \r\n    name = {item.name} \r\n    username = {item.username}\r\n    address = {item.address.city}\r\n    email = {item.email}\r\n    company = {item.company.name}  \r\n    />;      \r\n  });\r\n  return (    \r\n    <Fragment>\r\n      {cards}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (    \r\n    <section className = 'scrollbar'>\r\n      {props.children}\r\n    </section>    \r\n  ); \r\n}; \r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    }\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true };\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        <h1>Whoops! Something went wrong</h1>\r\n      );\r\n    } else {\r\n      return this.props.children;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport  ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      searchInput: '',\r\n      robots: [],\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response = response.json())\r\n    .then(users => {\r\n      this.setState({\r\n        robots: users,\r\n      });\r\n    });    \r\n  }\r\n\r\n  onSearchInputChange = (event) => {\r\n    this.setState({\r\n      searchInput: event.target.value,\r\n    });    \r\n  }\r\n\r\n  render() {\r\n    const { robots, searchInput } = this.state;\r\n    const foundRobots = robots.filter(robot => {\r\n\r\n      return (robot.name\r\n      .toLowerCase()\r\n      .startsWith( searchInput.toLowerCase() )\r\n      ||\r\n      robot.name\r\n      .toLowerCase()\r\n      .includes( searchInput.toLowerCase() )\r\n      );\r\n      \r\n    });\r\n\r\n    if (robots.length < 1) {\r\n      return (\r\n        <h1 className = 'tc f2'>LOADING</h1>\r\n      );\r\n    }\r\n\r\n    return (      \r\n    <div className = \"wrapper tc\">\r\n      <h1 className = 'title'>Robofriends</h1>\r\n      <SearchBox onInput = {this.onSearchInputChange}/>\r\n      <Scroll>\r\n        <ErrorBoundary>\r\n        \t<CardList robots = {foundRobots}/>\r\n        </ErrorBoundary>\r\n      </Scroll>\r\n    </div>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}